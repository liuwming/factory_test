/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testyeelight;

import com.yeelight.rtt.SWIGTYPE_p_int;
import com.yeelight.rtt.SWIGTYPE_p_void;
import com.yeelight.rtt.beacon_cmd_param_t;
import com.yeelight.rtt.rt_cmd_result_t;
import com.yeelight.rtt.rt_cmd_t;
import com.yeelight.rtt.rt_cmd_type_t;
import com.yeelight.rtt.rt_error_t;
import com.yeelight.rtt.rt_status_t;
import com.yeelight.rtt.rtt_interface;
import com.yeelight.rtt.rtt_interfaceConstants;
import java.awt.Component;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author GUOWEI
 */
public class TestYeelightUI extends javax.swing.JFrame {
    
    private  static final List<String> yklist= new ArrayList<String>();
    private static final Properties prop = new Properties();
    static{
        InputStream in = TestYeelightUI.class.getResourceAsStream("dd.properties");   
        try {
            prop.load(in);
        } catch (IOException e) {   
            e.printStackTrace();
        }
    }
    
    /**
     * Creates new form TestYeelightUI
     */
    public TestYeelightUI() {
        
        
        this.setTitle("Yeelight Wifi测试");
        
        
         Set<Object> keySet = prop.keySet();
            for(Object obj : keySet){
                String key = obj.toString();
                yklist.add(key);
         }  
          System.out.print(yklist.size());
          

        initComponents();

        jTextField4.requestFocus();
        jButton1.setVisible(false);

        StringBuilder sb = new StringBuilder();
        if (testItemWifiStandardList != null && testItemWifiStandardList.size() > 0) {
            TestItemWifiStandard tiws = testItemWifiStandardList.get(0);
            String model = tiws.getModel();
            sb.append("型号:");
            sb.append(model);
            sb.append("  ");
            String rssi = tiws.getRssiStandard();
            sb.append("wifi信号:");
            sb.append(rssi);
            sb.append("  ");
            String pr = tiws.getPacketRecvStandard();
            sb.append("收包:");
            sb.append(pr);
            sb.append("  ");
            String ps = tiws.getPacketSendStandard();
            sb.append("发包:");
            sb.append(ps);
            sb.append("  ");
        }
        if (sb.length() > 0) {
            jTextField1.setText(chipno);
        }
        
        final JDialog jd=new JDialog(this,"选择智能灯类型",true);  
        jd.setSize(300,200);
        final javax.swing.JComboBox  jcb = new javax.swing.JComboBox<>();
        jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "球泡灯", "吸顶灯"}));
        jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String selectitem = jcb.getSelectedItem()==null?null:jcb.getSelectedItem().toString();
                if(selectitem != null){
                    if(selectitem.equals("球泡灯")){
                          jComboBox8.setVisible(false);
                          jLabel13.setVisible(false);
                          jComboBox3.getModel().setSelectedItem("球泡灯");
                    }else if(selectitem.equals("吸顶灯")){
                        jComboBox8.setVisible(true);
                        jLabel13.setVisible(true);
                        jComboBox3.getModel().setSelectedItem("吸顶灯");
                    }
                    jd.setVisible(false);
                }
            }
        });
        jd.add(jcb);
        jd.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("DBSUATLEHZ:1433;databaseName=uapPU").createEntityManager();
        ttllfCjQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TtllfCj t");
        ttllfCjList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : ttllfCjQuery.getResultList();
        ttllfCxQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TtllfCx t");
        ttllfCxList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : ttllfCxQuery.getResultList();
        testItemQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TestItem t where t.type  <> 'WT'");
        testItemList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : testItemQuery.getResultList();
        equipInfoQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT e FROM EquipInfo e where e.type <> 'WT'");
        equipInfoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : equipInfoQuery.getResultList();
        entityManager0 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("DBSUATLEHZ:1433;databaseName=KBDBPU").createEntityManager();
        kbChipnoinfoQuery = java.beans.Beans.isDesignTime() ? null : entityManager0.createQuery("SELECT k FROM KbChipnoinfo k");
        kbChipnoinfoList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : kbChipnoinfoQuery.getResultList();
        testItemWifiStandardQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TestItemWifiStandard t");
        testItemWifiStandardList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : testItemWifiStandardQuery.getResultList();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("测试开始");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButton2KeyReleased(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MAC地址", "固件版本(firmware_ver)", "老化开始(brs)", "老化完成(brf)", "平均信号强度(avg_rssi)", "最小信号强度(min_rssi)", "最大信号强度(max_rssi)", "发包个数(packet_send)", "收包个数(packet_recv)", "设备状态", "IP地址", "是否合格"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("车间");

        jComboBox1.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof TtllfCj) {
                    TtllfCj mec = (TtllfCj)value;
                    setText(mec.getCode());
                }

                return this;
            }
        });

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ttllfCjList, jComboBox1);
        bindingGroup.addBinding(jComboBoxBinding);

        jLabel8.setText("产线");

        jComboBox5.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof TtllfCx) {
                    TtllfCx mec = (TtllfCx)value;
                    setText(mec.getCode());
                }
                return this;
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ttllfCxList, jComboBox5);
        bindingGroup.addBinding(jComboBoxBinding);

        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jLabel9.setText("测试项目");

        jComboBox6.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof TestItem) {
                    TestItem mec = (TestItem)value;
                    setText(mec.getCode());
                }
                return this;
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, testItemList, jComboBox6);
        bindingGroup.addBinding(jComboBoxBinding);

        jLabel10.setText("设备名称");

        jComboBox7.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof EquipInfo) {
                    EquipInfo mec = (EquipInfo)value;
                    setText(mec.getCode());
                }
                return this;
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, equipInfoList, jComboBox7);
        bindingGroup.addBinding(jComboBoxBinding);

        jLabel11.setText("测试人员");

        jTextField4.setEditable(false);
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
        });

        jLabel12.setText("开始时间");

        jTextField5.setEditable(false);
        jTextField5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField5MouseClicked(evt);
            }
        });

        jLabel2.setText("生产订单号");

        jLabel3.setText("产品型号");

        jButton3.setText("切换用户");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("黑体", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 51));

        jComboBox2.setEditable(true);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[]{})
        );
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel4.setText("合格标准:");

        jTextField1.setEditable(false);
        jTextField1.setForeground(new java.awt.Color(255, 102, 102));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel5.setText("客户型号");

        jTextField3.setText("YLDP01YL");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel13.setText("遥控器");
        jLabel13.setVisible(false);

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(yklist.toArray(new String[yklist.size()])));
        jComboBox8.setVisible(false);
        jComboBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox8ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "球泡灯", "吸顶灯"}));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel6.setText("智能灯类型");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))))
                        .addGap(30, 30, 30)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void startTest() {
        String s = jTextField4.getText();
        if (s == null || s.equals("")) {
            JOptionPane.showMessageDialog(this, "请点击测试人员输入框进行工卡扫描", "错误", JOptionPane.ERROR_MESSAGE);
            jTextField4.requestFocus();
        } else {
            jButton1.setVisible(true);
            jButton1.setText("测试中");
            jButton3.setEnabled(false);
            jButton2.setEnabled(false);
            TtllfCj shop = jComboBox1.getSelectedItem() == null ? null : (TtllfCj) jComboBox1.getSelectedItem();
            TtllfCx pl = jComboBox5.getSelectedItem() == null ? null : (TtllfCx) jComboBox5.getSelectedItem();
            TestItem testItem = jComboBox6.getSelectedItem() == null ? null : (TestItem) jComboBox6.getSelectedItem();
            EquipInfo eqName = jComboBox7.getSelectedItem() == null ? null : (EquipInfo) jComboBox7.getSelectedItem();

            final TestItemH tih = new TestItemH();
            tih.setShop(shop == null ? null : shop.getPkCj());
            tih.setProductLine(pl == null ? null : pl.getPkCx());
            tih.setTestItem(testItem == null ? null : String.valueOf(testItem.getId()));
            tih.setEquipName(eqName == null ? null : String.valueOf(eqName.getId()));
            tih.setTestPersonal(jTextField4.getText());
            tih.setStartTime(jTextField5.getText());

            final javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) jTable1.getModel();

            Runnable run;
            run = new Runnable() {
                @Override
                public void run() {
                    System.loadLibrary("rtt_interface");
                    SWIGTYPE_p_int err = null;
                    try {
                        Constructor<?> con = Class.forName("com.yeelight.rtt.SWIGTYPE_p_int").getDeclaredConstructor((Class[]) null);
                        con.setAccessible(true);
                        err = (SWIGTYPE_p_int) con.newInstance();
                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException ex) {
                        Logger.getLogger(TestYeelightUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    SWIGTYPE_p_void rtt_hdl = null;

                    if (rtt_hdl == null) {
                        rtt_hdl = rtt_interface.rtt_connect(5, err, rtt_interfaceConstants.RTT_PROTO_UDP, "127.0.0.1");
                    }
                    if (rtt_hdl == null) {
                        JOptionPane.showMessageDialog(TestYeelightUI.this, "failed to connect to server.", "错误", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    rt_cmd_result_t res = new rt_cmd_result_t();
                    rt_cmd_t cmd = new rt_cmd_t();
                    cmd.setType(rt_cmd_type_t.RT_CMD_START);
                    rtt_interface.rtt_send(rtt_hdl, cmd);
                    int rc = rtt_interface.rtt_recv(rtt_hdl, res, rt_cmd_type_t.RT_CMD_START);

                    if (rc < 0 || (rc > 0 && res.getRet_code() != rt_error_t.RT_ERR_OK)) {
                        System.out.println("**** " + rc);
                        System.out.println("**** " + res.getRet_code());
                        JOptionPane.showMessageDialog(TestYeelightUI.this, "Failed to exe start command", "错误", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    int count = 0;
                    while (true) {
                        rc = rtt_interface.rtt_recv(rtt_hdl, res, rt_cmd_type_t.RT_CMD_MAX);
                        
                        
                        if (rc <= 0) {
                            break;
                        }
                        
                        count++;
                        if(count == 4 ){
                            jButton1.setText("测试中");
                            count = 0;
                        }else{
                            jButton1.setText(jButton1.getText() + ".");
                        }
                        
                        
                        
                        /*
                         *不断的刷新测试数据
                         */
                        if (res.getType() == rt_cmd_type_t.RT_CMD_STATUS || res.getType() == rt_cmd_type_t.RT_CMD_RESULT) {
                            dtm.setRowCount(res.getDev_count());
                            for (int i = 0; i < res.getDev_count(); i++) {
                                rt_status_t status = rtt_interface.rtt_get_status(res, i);

                                String state = status.getState();
                                String mac = status.getMac();
                                String ip = status.getIp();
                                String fw_ver = null;
                                Integer brs = null, brf = null, avg_rssi = null, min_rssi = null, max_rssi = null;
                                Long ps = null, pr = null;

                                if (status.getState().equals(rtt_interfaceConstants.STATE_DEV_CONN)) {
                                    fw_ver = status.getFw_ver();
                                    brs = status.getBrs();
                                    brf = status.getBrf();
                                    avg_rssi = status.getAvg_rssi();
                                    min_rssi = status.getMin_rssi();
                                    max_rssi = status.getMax_rssi();
                                    ps = status.getPacket_send();
                                    pr = status.getPacket_recv();

                                    List<TestItemWifi> tiwList = tih.getTestItemWifiList();
                                    int flag = 0;
                                    for (TestItemWifi tiw : tiwList) {
                                        if (tiw.getMacAddr().equals(mac)) {
                                            tiw.setMacAddr(mac);
                                            tiw.setFirmwareVer(fw_ver);
                                            tiw.setBrs(String.valueOf(brs));
                                            tiw.setBrf(String.valueOf(brf));
                                            tiw.setAvgRssi(String.valueOf(avg_rssi));
                                            tiw.setMinRssi(String.valueOf(min_rssi));
                                            tiw.setMaxRssi(String.valueOf(max_rssi));
                                            tiw.setPacketSend(String.valueOf(ps));
                                            tiw.setPacketRecv(String.valueOf(pr));
                                            flag = 1;
                                            break;
                                        }
                                    }
                                    if (flag == 0) {
                                        TestItemWifi tiw = new TestItemWifi();
                                        tiw.setMacAddr(mac);
                                        tiw.setFirmwareVer(fw_ver);
                                        tiw.setBrs(String.valueOf(brs));
                                        tiw.setBrf(String.valueOf(brf));
                                        tiw.setAvgRssi(String.valueOf(avg_rssi));
                                        tiw.setMinRssi(String.valueOf(min_rssi));
                                        tiw.setMaxRssi(String.valueOf(max_rssi));
                                        tiw.setPacketSend(String.valueOf(ps));
                                        tiw.setPacketRecv(String.valueOf(pr));
                                        tiw.setHId(tih);
                                        tih.getTestItemWifiList().add(tiw);
                                    }

                                }

                                dtm.setValueAt(mac, i, 0);
                                dtm.setValueAt(fw_ver, i, 1);
                                dtm.setValueAt(brs, i, 2);
                                dtm.setValueAt(brf, i, 3);
                                dtm.setValueAt(avg_rssi, i, 4);
                                dtm.setValueAt(min_rssi, i, 5);
                                dtm.setValueAt(max_rssi, i, 6);
                                dtm.setValueAt(ps, i, 7);
                                dtm.setValueAt(pr, i, 8);
                                dtm.setValueAt(state, i, 9);
                                dtm.setValueAt(ip, i, 10);

                            }
                        }

                        /*
                         最终的测试结果
                         */
                        List<String> macs = new ArrayList<>();
                        if (res.getType() == rt_cmd_type_t.RT_CMD_RESULT) {
                            //更新合格状态
                            int rowCount = dtm.getRowCount();

                            int standard_count = 0;
                            int notStandard_count = 0;
                            
                            System.out.println(rowCount);
                            for (int i = 0; i < rowCount; i++) {
                                String mac = dtm.getValueAt(i, 0) == null ? null : dtm.getValueAt(i, 0).toString();
                                String brf = dtm.getValueAt(i, 3) == null ? null : dtm.getValueAt(i, 3).toString();
                                
                                System.out.println(mac);
                                
                                //判断是否合格
                                boolean isStandard = true;

                                //判断老化标记
                                if (brf == null || Integer.valueOf(brf) < 2) {
                                    isStandard = false;//不合格
                                }

                                //判断是否符合合格标准
                                if (testItemWifiStandardList != null && testItemWifiStandardList.size() > 0) {
                                    TestItemWifiStandard tiws = testItemWifiStandardList.get(0);
                                    String model = jTextField3.getText();
                                    if (model != null && model.equals(tiws.getModel())) {
                                        String rssi = tiws.getRssiStandard();
                                        String ps = tiws.getPacketSendStandard();
                                        String pr = tiws.getPacketRecvStandard();

                                        String[] rssis = rssi == null ? null : rssi.split("~");
                                        String[] pss = ps == null ? null : ps.split("~");
                                        String[] prs = pr == null ? null : pr.split("~");

                                        if (rssis != null) {
                                            String r1 = rssis[0];
                                            String r2 = rssis[1];

                                            Double d1 = Double.valueOf(r1);
                                            Double d2 = Double.valueOf(r2);

                                        }
                                    }
                                }

                                

                                    if (isStandard) {
                                        dtm.setValueAt("合格", i, 11);
                                        macs.add(mac);
                                        standard_count++;

                                        for (TestItemWifi tiw : tih.getTestItemWifiList()) {
                                            if (tiw.getMacAddr().equals(mac)) {
                                                tiw.setIsConfirm('Y');
                                                break;
                                            }
                                        }
                                    } else {
                                        dtm.setValueAt("不合格", i, 11);
                                        notStandard_count++;

                                        for (TestItemWifi tiw : tih.getTestItemWifiList()) {
                                            if (tiw.getMacAddr().equals(mac)) {
                                                tiw.setIsConfirm('N');
                                                break;
                                            }
                                        }
                                    }
                                
                                
                                System.out.println(isStandard);
                                System.out.println(standard_count);
                                System.out.println(notStandard_count);
                            }

                            //保存测试结果
                            if (tih.getTestItemWifiList().size() > 0) {
                                entityManager.getTransaction().begin();
                                entityManager.persist(tih);
                                entityManager.getTransaction().commit();
                            }
                            
                            
                            if(jComboBox3 != null && jComboBox3.getSelectedItem() != null && jComboBox3.getSelectedItem().toString().equals("吸顶灯")){
                                 System.out.println(" 保存测试结果完成，匹配遥控器");
                                    String beanmac=null;String beankey=null;
                                      String key = jComboBox8.getSelectedItem()==null?null:jComboBox8.getSelectedItem().toString();
                                      if(key != null){
                                          if(prop.get(key) != null){
                                              String value = prop.get(key).toString();
                                              String[] values = value.split("#");
                                              if(values != null && values.length == 2){
                                                  beanmac = values[0];
                                                  beankey = values[1];
                                              }
                                          }

                                      }


                                     System.out.println(" bean mac" + beanmac); 
                                     System.out.println(" bean mac" + beankey); 
                                     System.out.println(" macs " + Arrays.toString(macs.toArray())); 
                                  StringBuilder errormsg = new StringBuilder();
                                  for (String mac : macs) {
                                      if(beanmac != null && beankey != null){
                                           //对遥控器和合格灯进行配对
                                           System.out.println(" 对遥控器和合格灯进行配对" + mac + "  " + beanmac + " " + beankey);
                                           int ykrc = add_controller(rtt_hdl, mac, beanmac, beankey);
                                           System.out.println(ykrc);
                                           if (ykrc==0) {
                                               errormsg.append(mac +" " + beanmac +" " + "没有配对成功");
                                           }
                                       }
                                  }
                                  System.out.println("匹配遥控器完成");
                                  System.out.println(errormsg.toString());
                                  if(errormsg != null && errormsg.length() > 0 && !errormsg.toString().equals("")){
                                      JOptionPane.showMessageDialog(TestYeelightUI.this, errormsg.toString());
                                  }
                            }
                                
                            //对于合格的发送结束指令
                            for (String mac : macs) {
                                 System.out.println(" 对合格发送结束指令 " + mac);
                                 
                                cmd.getBody().setMac(mac);
                                cmd.setType(rt_cmd_type_t.RT_CMD_CTRL_DEV);
                                rtt_interface.rtt_send(rtt_hdl, cmd);
                                int rc_close = rtt_interface.rtt_recv(rtt_hdl, res, rt_cmd_type_t.RT_CMD_CTRL_DEV);
                            }
                            
                            
                           
                            
                            JOptionPane.showMessageDialog(TestYeelightUI.this, "测试完成");

                            if (rowCount <= 0) {
                                jButton1.setText("未检测到任何设备");
                            } else {
                                jButton1.setText("测试完成 " + "合格:" + standard_count + " " + "不合格:" + notStandard_count);
                            }

                            jButton2.setEnabled(true);
                            jButton3.setEnabled(true);
                            jButton2.requestFocus();

                            dtm.setRowCount(0);

                            break;
                        }

                    }

                }
            };

            Thread th = new Thread(run);
            th.start();

        }
    }
    
    public static int add_controller(SWIGTYPE_p_void rtt_hdl, String dev_mac, String beacon_mac, String beacon_key) {
       rt_cmd_result_t res = new rt_cmd_result_t();
       beacon_cmd_param_t beacon_cmd = new beacon_cmd_param_t();
       rt_cmd_t  cmd = new rt_cmd_t();
       int rc;

       beacon_cmd.setMac_dev(dev_mac);
       beacon_cmd.setMac_beacon(beacon_mac);
       beacon_cmd.setKey(beacon_key);

       cmd.getBody().setBeacon(beacon_cmd);
       cmd.setType(rt_cmd_type_t.RT_CMD_ADD_BEACON);
        System.out.println("rtt send");
       rtt_interface.rtt_send(rtt_hdl, cmd);
       System.out.println("rtt send end");
       System.out.println("rtt recv");
       rc = rtt_interface.rtt_recv(rtt_hdl, res, rt_cmd_type_t.RT_CMD_ADD_BEACON);
       System.out.println("rtt recv end");
       
       if (rc < 0 || (rc > 0 && res.getRet_code() != rt_error_t.RT_ERR_OK)) {
           System.out.println("Failed to exe start command");
           return 0;
       }
       return 1;
   }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        startTest();

    }//GEN-LAST:event_jButton2ActionPerformed


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here
        int result = JOptionPane.showConfirmDialog(this, "是否切换用户?");
        System.out.println(result);
        if (result == 0) {
            chipno = "";
            jTextField4.setFocusable(true);
            jTextField4.requestFocus();
            jTextField4.setText("");
            jTextField5.setText("");
            jButton1.setVisible(false);

            javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) jTable1.getModel();
            for (int i = 0; i < dtm.getRowCount(); i++) {
                dtm.removeRow(i);
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private String chipno = "";
    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
        // TODO add your handling code here:

        if (evt.getKeyCode() == '\n') {
            return;
        }
        char c = evt.getKeyChar();

        chipno += c;

        if (chipno.trim().length() == 8) {
            System.out.println(chipno);

            for (testyeelight.KbChipnoinfo kbci : kbChipnoinfoList) {

                String s = kbci.getKbChipnoinfoPK().getChipno();

                if (chipno.toLowerCase().equals(s.toLowerCase())) {
                    String name = kbci.getDescription();
                    System.out.println(chipno);

                    jTextField4.setText(name);
                    jTextField4.setFocusable(false);
                    Date date = new Date();
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                    jTextField5.setText(df.format(date));

                    chipno = "";
                    break;
                }
            }

//            jButton2.requestFocus();
        }
    }//GEN-LAST:event_jTextField4KeyPressed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String mo_code = jComboBox2.getSelectedItem().toString();
        jTextField2.setText(mo_map.get(mo_code));
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTextField5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField5MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField5MouseClicked

    Map<String, String> mo_map = new HashMap<>();
    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        // TODO add your handling code here:
        if (jComboBox5 == null) {
            return;
        }

        TtllfCx pl = jComboBox5.getSelectedItem() == null ? null : (TtllfCx) jComboBox5.getSelectedItem();
        if (pl == null) {
            return;
        }
        String pl_code = pl.getCode();

        TtllfCj shop = jComboBox1.getSelectedItem() == null ? null : (TtllfCj) jComboBox1.getSelectedItem();
        if (shop == null) {
            return;
        }

        String shop_code = shop.getCode();
        Date date = new Date();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String sql = "select scddh, produce from ttllf_jhrw_new where convert(char(10),kssj,120) = '" + df.format(date)
                + "' and cjcode='" + shop_code
                + "' and cxcode='" + pl_code
                + "'";
        List li = entityManager.createNativeQuery(sql).getResultList();
        javax.swing.DefaultComboBoxModel dcbm = (javax.swing.DefaultComboBoxModel) jComboBox2.getModel();

        for (Object obj : li) {
            Object[] objs = (Object[]) obj;
            if (objs[0] == null) {
                continue;
            }
            String mo_code = objs[0].toString();
            String model = objs[1].toString();
            mo_map.put(mo_code, model);

            dcbm.addElement(mo_code);
        }
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            startTest();
        }
    }//GEN-LAST:event_jButton2KeyPressed

    private void jButton2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2KeyReleased

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
            // TODO add your handling code here:
         if (jComboBox3 == null) {
            return;
        }
         String selectitem = jComboBox3.getSelectedItem()==null?null:jComboBox3.getSelectedItem().toString();
         if(selectitem != null){
             if(selectitem.equals("球泡灯")){
                   jComboBox8.setVisible(false);
                   jLabel13.setVisible(false);
             }else if(selectitem.equals("吸顶灯")){
                 jComboBox8.setVisible(true);
                 jLabel13.setVisible(true);
             }
         }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestYeelightUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TestYeelightUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager entityManager;
    private javax.persistence.EntityManager entityManager0;
    private java.util.List<testyeelight.EquipInfo> equipInfoList;
    private javax.persistence.Query equipInfoQuery;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private java.util.List<testyeelight.KbChipnoinfo> kbChipnoinfoList;
    private javax.persistence.Query kbChipnoinfoQuery;
    private java.util.List<testyeelight.TestItem> testItemList;
    private javax.persistence.Query testItemQuery;
    private java.util.List<testyeelight.TestItemWifiStandard> testItemWifiStandardList;
    private javax.persistence.Query testItemWifiStandardQuery;
    private java.util.List<testyeelight.TtllfCj> ttllfCjList;
    private javax.persistence.Query ttllfCjQuery;
    private java.util.List<testyeelight.TtllfCx> ttllfCxList;
    private javax.persistence.Query ttllfCxQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
