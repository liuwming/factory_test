#include "util.h"
#include "test.h"
#include "string.h"
#include "air.h"

static void rt_tmr_func(int tid, void* data);
static void dev_rpc_send(rt_dev_t* dev, char* method, char* param);
static void rt_miio_dev_hs(rt_dev_t* dev);
static void rt_dev_tmr_func(int tid, void* data);

char *universal_beacon_mac = "";
char *universal_beacon_key = "";

char TOKEN[] = { 
    0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF 
};

static radio_test_t   rt_cb = {
    .state = RT_IDLE,
    .param = {{1, 40}, {1, 1}, {1, -50}, {1, -60}, {1, -40}, {1, 10}},
    .dev_cnt = 0,
    .dev_list = {.prev = &(rt_cb.dev_list), .next = &(rt_cb.dev_list)}
};

int rt_running() 
{
    return (rt_cb.state == RT_RUNNING);
}

int start_test()
{
    int rc;

    rc = rtt_exec("/etc/init.d/hostapd stop && sleep 8", 1);
    rc = rtt_exec("/etc/init.d/hostapd start", 1);
    if (rc != 0)
        return RT_ERR_START_HOSTAPD;

    rc = rtt_exec("dnsmasq --conf-file=/etc/dnsmasq.conf", 1);
    if (rc != 0) 
        return RT_ERR_START_DNS;

    rc = rtt_exec("rngd -r /dev/urandom -o /dev/random", 1);
    if (rc != 0) 
        return RT_ERR_START_DNS;

    /* need to call this here as we actually blocked 8 for seconds in above call */
    time_update();

    PANIC_IF(rt_cb.dev_cnt != 0);
    PANIC_IF(!list_is_empty(&(rt_cb.dev_list)));
    PANIC_IF(air_start());      /* start to monitor 802.11 traffic */
    
    rt_cb.state = RT_RUNNING;
    rt_start_tmr(tmr_duration, rt_cb.param.duration.val, RT_TMR_DURATION, 0);
    rt_start_tmr(tmr_sample, rt_cb.param.sample_rate.val, RT_TMR_SAMPLE, 1);

    return 0;
}

static void rt_tmr_func(int tid, void* data)
{
    /* time to stop this round of test and report result */
    if (tid == RT_TMR_DURATION) {
        report_status(NULL, RT_CMD_RESULT);
        stop_test();
    } else if (tid == RT_TMR_SAMPLE) {
        report_status(NULL, RT_CMD_STATUS);
    } else {
        ;
    }
}

static char* parse_miio_rsp(rt_dev_t* dev, char* buf, int len)
{
    int info_size;
    unsigned int info_len;
    char* info;

    info_size = len - header_size;
    info = (char*)calloc(info_size*20, sizeof(char));
    info_len = decrypt(buf, len, dev->md5, info, info_size);

    RT_ERR("Info len: %d, content: %s\n", info_len, info);
    return info;
}

static int rt_miio_recv(io_inst_t* inst)
{
    char buf[1024] = {0};
    char body[20] = {0};
    int valid_body = 0;
    char *rsp, *p1, *p2;
    int rc;
    uint16_t len;

    rt_dev_t* dev = inst->priv;
    
    do {
        rc = recv(inst->fd, buf, sizeof(buf), 0);
    } while (rc < 0 && errno == EINTR);

    if (rc <= 0) {
        RT_ERR("failed to receive message from Miio.\n");
        return -1;
    }

    /* miio device connect state machine */
    switch (dev->miio_dev_state) {

    case STATE_IDLE:
        parse_msg_head(buf, &len, &(dev->did), &(dev->stamp), dev->md5);

        dev->time = NOW();
        del_timer(&(dev->tmr));
        
        dev_rpc_send(dev, "miIO.info", "[]");
        dev_start_tmr(dev, 10, RT_DEV_TMR_PROBE, 0);

        dev->miio_dev_state = STATE_CONNECTING;
        break;

    case STATE_CONNECTING:
        rsp = parse_miio_rsp(dev, buf, rc);

        if (strstr(rsp, "yeelink.light")) {
            del_timer(&(dev->tmr));
            dev->miio_dev_state = STATE_CONNECTED;
            dev->rt_dev_state = RT_DEV_IDENTIFIED;
            /* send message to miio dev every 1 sec */
            dev_start_tmr(dev, 1, RT_DEV_TMR_SENDMSG, 1);
        }
        free(rsp);

        break;

    case STATE_CONNECTED:
        rsp = parse_miio_rsp(dev, buf, rc);
        if (dev->fw_ver[0] == '\0' || dev->brs == -1 || dev->brf == -1) {
            if (strstr(rsp, "result")) {
                p1 = strchr(rsp, '['); 
                p2 = strchr(rsp, ']');
                if (p1 && p2 && (p1 < p2)) {
                    memcpy(body, p1+1, p2-p1-1);
                    valid_body = 1;
                }
            }
        }
        if (valid_body) {
            if (strchr(body, ',')) {
                sscanf(body, "%d,%d", &(dev->brs), &(dev->brf));
            } else {
                memcpy(dev->fw_ver, body, strlen(body));
            }
        }

        free(rsp);
        dev->packet_recv ++;
        break;

    default:
        break;
    }
    
    return 0;
}

static void rt_dev_miio_start(rt_dev_t* dev)
{
    int sock, rc;

    memset(&(dev->addr), 0, sizeof(dev->addr));
    dev->addr.sin_family = AF_INET;
    inet_aton(dev->ip, &(dev->addr.sin_addr));
    dev->addr.sin_port = htons(MIIO_TRAFFIC_PORT);
    
    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

    /* add to io-mux poll list */
    IO_INST_INIT(&(dev->io),
                 sock,
                 IO_EVENT_IN,
                 1,
                 0,
                 rt_miio_recv,
                 NULL,
                 NULL,
                 dev);

    rc = iomux_add(&(dev->io));
    PANIC_IF(rc < 0);

    dev->miio_dev_state = STATE_IDLE;
    /* init and send handshake message */
    rt_miio_dev_hs(dev);
}

static void rt_miio_dev_hs(rt_dev_t* dev)
{
    char msg[header_size] = { 0 };
    init_msg_head(msg, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFF, TOKEN, header_size);
    dev_connect(dev);
    dev_send(dev, msg, header_size);
    dev_start_tmr(dev, 5, RT_DEV_TMR_HANDSHAKE, 0);
}

static void dev_raw_send(rt_dev_t* dev, char* raw)
{
    int rc, rpc_len, total_len;
    char* msg;
    char cmd_buf[1024] = {0};

    rc = snprintf(cmd_buf, sizeof(cmd_buf),
                  "{%s:%d, %s}",
                  ID, ++dev->id, 
                  raw);

    rpc_len = ROUND(rc);
    total_len = rpc_len + header_size;
    
    msg = (char*)calloc(total_len*10, sizeof(char));    

    encrypt(dev->did, dev->md5, 
            dev->stamp + (NOW() - dev->time), 
            cmd_buf, rc, msg, total_len);

    dev_send(dev, msg, total_len);

    free(msg);
}

static void dev_rpc_send(rt_dev_t* dev, char* method, char* param)
{
    char rpc_buf[1024] = {0};

    snprintf(rpc_buf, sizeof(rpc_buf),
             "%s:%s%s%s,%s:%s",
             METHOD, QT, method, QT,
             PARAMS, param);

    dev_raw_send(dev, rpc_buf);
}

static char* rt_dev_scan_ip(unsigned char* mac)
{
    char* ip = xalloc(16);
    FILE* fp;
    char mac_str[32] = {0}; 
    char cmd[128] = {0};
    int item;

    snprintf(mac_str, sizeof(mac_str), "%02x:%02x:%02x:%02x:%02x:%02x", 
             mac[0], mac[1], mac[2],
             mac[3], mac[4], mac[5]);

    snprintf(cmd, sizeof(cmd), "grep \"%s\" /var/lib/misc/dnsmasq.leases | cut -d \" \" -f 3", mac_str);

    fp = popen(cmd, "r");
    if (fp == NULL) 
        goto err;

    item = fscanf(fp, "%s", ip);
    if (item != 1) 
        goto err;

    RT_ERR("Found ip address %s for mac %s\n", ip, mac_str);

    fclose(fp);
    return ip;
 err:
    free(ip);
    if (fp) fclose(fp);
    return NULL;
}

static void rt_dev_tmr_func(int tid, void* data)
{
    rt_dev_t* dev = data;
    char* ip;
    char cmd[128] = {0};

    if (tid == RT_DEV_TMR_SCANIP) {
        ip = rt_dev_scan_ip(dev->mac);
        if (ip) {
            strncpy(dev->ip, ip, sizeof(dev->ip));
            free(ip);
            snprintf(cmd, sizeof(cmd), "ping -i 0.5 %s", dev->ip);
            dev->async_pid = rtt_exec2(cmd);
            dev->rt_dev_state = RT_DEV_IP_ALLOCED;
            rt_dev_miio_start(dev);
        } else {
            RT_ERR("No ip found.\n");
            dev_start_tmr(dev, 3, RT_DEV_TMR_SCANIP, 0);
        }
    } else if (tid == RT_DEV_TMR_SENDMSG) {
        dev_rpc_send(dev, "get_prop", "[\"prod_info.fw_ver\"]");
        dev->packet_send ++;
        if (dev->brs == -1 || dev->brf == -1) {
            dev_rpc_send(dev, "get_aging_status", "[]");
            dev->packet_send ++;
        }
    } else if (tid == RT_DEV_TMR_HANDSHAKE) {
        RT_ERR("handshake timeout for dev %s\n", dev->ip);
        if (dev->hand_shake_cnt++ > 3) {
            RT_ERR("handshake failure for dev %s\n", dev->ip);
            goto fail_miio_dev;
        } 
        rt_miio_dev_hs(dev);

    } else if (tid == RT_DEV_TMR_PROBE) {
        RT_ERR("probe timeout for dev %s\n", dev->ip);
        if (dev->probe_cnt++ > 3) {
            RT_ERR("probe failure for dev %s\n", dev->ip);
            goto fail_miio_dev;            
        }
        dev_rpc_send(dev, "miIO.info", "[]");
        dev_start_tmr(dev, 10, RT_DEV_TMR_PROBE, 0);
    }

    return;

 fail_miio_dev:
    dev->rt_dev_state = RT_DEV_CONN_FAILED;
    rtt_wait_pid(dev->async_pid);
    iomux_del(&(dev->io));
    close(dev->io.fd);
    return;
}

int stop_test()
{
    list_node_t *node;
    rt_dev_t* dev;

    air_stop();
    del_timer(&(rt_cb.tmr_duration));
    del_timer(&(rt_cb.tmr_sample));
    rt_cb.state = RT_IDLE;

    /* gather information and clear */
    list_for(&(rt_cb.dev_list), node) {
        dev = object_of(rt_dev_t, self, node);
        del_timer(&(dev->tmr)); /* stop sending message */
    }

    return 0;
}

int clear_test()
{
    list_node_t *node, *tmp;
    rt_dev_t* dev;

    /* gather information and clear */
    list_for_del(&(rt_cb.dev_list), node, tmp) {
        list_del(node);
        dev = object_of(rt_dev_t, self, node);
        del_timer(&(dev->tmr));
        if (dev->rt_dev_state == RT_DEV_IP_ALLOCED || 
            dev->rt_dev_state == RT_DEV_IDENTIFIED) {
            rtt_wait_pid(dev->async_pid);
            iomux_del(&(dev->io));
            close(dev->io.fd);
        }
        free(dev);
        rt_cb.dev_cnt--;
    }
    /* clear dns leases */
    rtt_exec("pkill dnsmasq", 1);
    rtt_exec("rm -f /var/lib/misc/dnsmasq.leases", 1);
    
    return 0;
}

void set_param(rt_param_t* p)
{
    rt_set_param_field((&(rt_cb.param)), p, duration);
    rt_set_param_field((&(rt_cb.param)), p, sample_rate);
    rt_set_param_field((&(rt_cb.param)), p, thresh_avg_rssi);
    rt_set_param_field((&(rt_cb.param)), p, thresh_min_rssi);
    rt_set_param_field((&(rt_cb.param)), p, thresh_max_rssi);
    rt_set_param_field((&(rt_cb.param)), p, thresh_packet_loss);
}

rt_param_t* get_param()
{
    return &(rt_cb.param);
}

static rt_dev_t* rt_find_dev(unsigned char* mac)
{
    list_node_t* node;
    rt_dev_t* dev;

    list_for(&(rt_cb.dev_list), node) {
        dev = object_of(rt_dev_t, self, node);
        if (memcmp(dev->mac, mac, 6) == 0) 
            return dev;
    }
    return NULL;
}

static rt_dev_t* rt_add_dev(unsigned char* mac)
{
    rt_dev_t* dev= xalloc(sizeof(rt_dev_t));

    memcpy(dev->mac, mac, 6);
    list_node_init(&(dev->self));
    list_ins_back(&(rt_cb.dev_list), &(dev->self));
    rt_cb.dev_cnt ++;

    dev->min_rssi = 1;
    dev->max_rssi = -1000;
    dev->rt_dev_state = RT_DEV_START;
    dev_start_tmr(dev, 3, RT_DEV_TMR_SCANIP, 0); /* scan for IP every 3 secs */
    dev->brs = -1;
    dev->brf = -1;
    return dev;
}

static void rt_update_dev_rssi(rt_dev_t* dev, int power)
{
    dev->total_rssi += power;
    dev->rssi_calc_cnt++;
    dev->avg_rssi = dev->total_rssi / dev->rssi_calc_cnt;

    if (power < dev->min_rssi)
        dev->min_rssi = power;
    if (power > dev->max_rssi)
        dev->max_rssi = power;
}

void ctrl_dev(char* dev_mac, ctrl_dev_cmd_t cmd)
{
    list_node_t* node;
    rt_dev_t* dev;
    char mac[32] = {0};
    char *p;
    char ip[16];
    char cmd_param[128];

    list_for(&(rt_cb.dev_list), node) {
        dev = object_of(rt_dev_t, self, node);

        snprintf(mac, sizeof(mac), "%02x:%02x:%02x:%02x:%02x:%02x",
                 dev->mac[0], dev->mac[1], dev->mac[2],
                 dev->mac[3], dev->mac[4], dev->mac[5]);

        RT_ERR("Compare mac [%s] with target [%s]\n", mac, dev_mac);

        if (!strcmp(dev_mac, mac)) {
            switch(cmd)
            {
            case CTRL_DEV_CMD_TEST_PASS:
                dev_rpc_send(dev, "miio_test_exit", "[0]");
                break;
            case CTRL_DEV_CMD_TEST_FAIL:
                dev_rpc_send(dev, "miio_test_exit", "[1]");
                break;
            case CTRL_DEV_CMD_OTA:
                if (strcmp(dev->fw_ver, "\"17\"") == 0
                    || strcmp(dev->fw_ver, "\"9\"") == 0
                    || strcmp(dev->fw_ver, "\"22\"") == 0) {
                    strcpy(ip, dev->ip);
                    p = rindex(ip, '.');
                    if (!p)
                        return;
                    *(p+1) = '1';
                    *(p+2) = '\0';
                    //sprintf(cmd_param, "{\"app_url\":\"http://%s/lamp.bin\"}", ip);
                    sprintf(cmd_param, "{\"app_url\":\"http://www.yeelight.com/lamp.bin\"}");
                    dev_rpc_send(dev, "miIO.ota", cmd_param);
                }
                break;
            case CTRL_DEV_CMD_ADD_BEACON:
                sprintf(cmd_param, "{\"mac\":\"%s\",\"pid\":69,\"eid\":4097,\"beaconKey\":\"%s\"}",
                        universal_beacon_mac, universal_beacon_key);
                dev_rpc_send(dev, "miIO.bleEvtRuleAdd", cmd_param);
                break;
            }
            
            return;
        }
    }
    RT_ERR("No device found for mac [%s], how ???\n", dev_mac);
}

void rt_update_stats(unsigned char* mac, struct rx_info *ri, unsigned char* h80211, unsigned char* bssid)
{
    if (!rt_running()) return;

    rt_dev_t* dev = rt_find_dev(mac);
    if (dev == NULL) {
        RT_ERR("Found new device.\n");
        dev = rt_add_dev(mac);
    }
    
    //update bitrate to station
    if(( h80211[1] & 3 ) == 2)
        dev->rate_to = ri->ri_rate;

    /* only update power if packets comes from the
     * client: either type == Mgmt and SA != BSSID,
     * or FromDS == 0 and ToDS == 1 */
    if( ( ( h80211[1] & 3 ) == 0 &&
            memcmp( h80211 + 10, bssid, 6 ) != 0 ) ||
        ( ( h80211[1] & 3 ) == 1 ) )
    {
        rt_update_dev_rssi(dev, ri->ri_power);
        dev->rate_from = ri->ri_rate;
    }

    return ;
}

#define rt_res(field) result.body.status[result.dev_count].field

void report_status(rt_client_t* clnt, int type)
{
    list_node_t* node;
    rt_dev_t* dev;
    rt_cmd_result_t result;
    char mac[32] = {0};

    bzero(&result, sizeof(result));

    result.type = type;

    list_for(&(rt_cb.dev_list), node) {
        if (result.dev_count >= MAX_TEST_DEV)
            break;
        dev = object_of(rt_dev_t, self, node);

        snprintf(mac, sizeof(mac), "%02x:%02x:%02x:%02x:%02x:%02x",
                 dev->mac[0], dev->mac[1], dev->mac[2],
                 dev->mac[3], dev->mac[4], dev->mac[5]);

        memcpy(rt_res(mac), mac, sizeof(mac));

        if (dev->rt_dev_state == RT_DEV_START) {
            sprintf(rt_res(ip), "Allocating");
            sprintf(rt_res(state), "Acquiring IP");
        } else if (dev->rt_dev_state == RT_DEV_IP_ALLOCED) {
            sprintf(rt_res(ip), "%s", dev->ip);
            sprintf(rt_res(state), "IP Allocated");
        } else if (dev->rt_dev_state == RT_DEV_IDENTIFIED) {
            sprintf(rt_res(ip), "%s", dev->ip);
            switch (dev->miio_dev_state) {
            case STATE_IDLE:
                sprintf(rt_res(state), "Probing Device");
                break;
            case STATE_CONNECTING:
                sprintf(rt_res(state), "Hand-shaking with Device");
                break;
            case STATE_CONNECTED:
                sprintf(rt_res(state), "Device Connected");
                memcpy(rt_res(fw_ver), dev->fw_ver, sizeof(dev->fw_ver));
                rt_res(did) = dev->did;
                rt_res(rssi_calc_cnt) = dev->rssi_calc_cnt;
                rt_res(avg_rssi) = dev->avg_rssi;
                rt_res(min_rssi) = dev->min_rssi;
                rt_res(max_rssi) = dev->max_rssi;
                rt_res(packet_send) = dev->packet_send;
                rt_res(packet_recv) = dev->packet_recv;
                rt_res(brs) = dev->brs;
                rt_res(brf) = dev->brf;
                break;
            default:
                break;
            }
        } else if (dev->rt_dev_state == RT_DEV_CONN_FAILED) {
            sprintf(rt_res(ip), "%s", dev->ip);
            sprintf(rt_res(state), "Probing Failed");            
        } else {
            RT_ERR("Unexpected state.\n");
            continue;
        }
        result.dev_count++;
    }        

    if (clnt)
        clnt_result2(clnt, &result);
    else 
        clnt_broadcast_res(&result);
}
